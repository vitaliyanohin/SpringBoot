Index: pom.xml
===================================================================
--- pom.xml	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ pom.xml	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,127 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>com.boraji.tutorial.springboot</groupId>
+  <artifactId>spring-boot-hello-world-example</artifactId>
+  <version>0.0.1-SNAPSHOT</version>
+  <packaging>war</packaging>
+  <properties>
+    <java.version>1.8</java.version>
+  </properties>
+  <parent>
+    <groupId>org.springframework.boot</groupId>
+    <artifactId>spring-boot-starter-parent</artifactId>
+    <version>1.5.4.RELEASE</version>
+  </parent>
+  <dependencies>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-web</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-security</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter-data-jpa</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet.jsp.jstl</groupId>
+      <artifactId>javax.servlet.jsp.jstl-api</artifactId>
+      <version>1.2.1</version>
+    </dependency>
+    <dependency>
+      <groupId>taglibs</groupId>
+      <artifactId>standard</artifactId>
+      <version>1.1.2</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>javax.servlet-api</artifactId>
+      <version>3.1.0</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.sun.mail</groupId>
+      <artifactId>javax.mail</artifactId>
+      <version>1.6.2</version>
+    </dependency>
+    <dependency>
+      <groupId>log4j</groupId>
+      <artifactId>log4j</artifactId>
+      <version>1.2.17</version>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+      <version>4.3.7.RELEASE</version>
+    </dependency>
+    <dependency>
+      <groupId>mysql</groupId>
+      <artifactId>mysql-connector-java</artifactId>
+      <version>8.0.16</version>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-jdbc</artifactId>
+      <version>4.3.7.RELEASE</version>
+    </dependency>
+    <!-- Hibernate 5.2.9 Final -->
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-core</artifactId>
+      <version>5.2.9.Final</version>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+      <version>4.3.7.RELEASE</version>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-orm</artifactId>
+      <version>4.3.7.RELEASE</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jstl</artifactId>
+    </dependency>
+    <!-- Apache Commons DBCP -->
+    <dependency>
+      <groupId>org.apache.commons</groupId>
+      <artifactId>commons-dbcp2</artifactId>
+      <version>2.1.1</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.tomcat.embed</groupId>
+      <artifactId>tomcat-embed-jasper</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate</groupId>
+      <artifactId>hibernate-entitymanager</artifactId>
+      <version>5.2.3.Final</version>
+    </dependency>
+    <dependency>
+      <groupId>taglibs</groupId>
+      <artifactId>standard</artifactId>
+      <version>1.1.2</version>
+    </dependency>
+    <!-- JSP Dependency -->
+    <dependency>
+      <groupId>javax.servlet.jsp</groupId>
+      <artifactId>javax.servlet.jsp-api</artifactId>
+      <version>2.3.1</version>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-maven-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
+</project>
\ No newline at end of file
Index: src/main/java/com/boraji/tutorial/springboot/MainApp.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/MainApp.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/MainApp.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,11 @@
+package com.boraji.tutorial.springboot;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class MainApp {
+   public static void main(String[] args) {
+      SpringApplication.run(MainApp.class, args);
+   }
+}
Index: src/main/java/com/boraji/tutorial/springboot/config/WebConfig.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/config/WebConfig.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/config/WebConfig.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,22 @@
+package com.boraji.tutorial.springboot.config;
+
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.config.annotation.EnableWebMvc;
+import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
+import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
+
+@Configuration
+@EnableWebMvc
+public class WebConfig extends WebMvcConfigurerAdapter {
+
+   @Override
+   public void configureViewResolvers(ViewResolverRegistry registry) {
+      registry.jsp().prefix("/WEB-INF/views/").suffix(".jsp");
+   }
+
+   @Override
+   public void addViewControllers(ViewControllerRegistry registry) {
+      registry.addViewController("/login").setViewName("/index");
+   }
+}
Index: src/main/java/com/boraji/tutorial/springboot/config/WebSecurityConfig.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/config/WebSecurityConfig.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/config/WebSecurityConfig.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,70 @@
+package com.boraji.tutorial.springboot.config;
+
+import com.boraji.tutorial.springboot.service.UserDetailsServiceImp;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.core.userdetails.User;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.security.provisioning.InMemoryUserDetailsManager;
+
+import java.util.Collection;
+
+@Configuration
+@EnableWebSecurity
+public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
+
+    @Bean
+    public UserDetailsService userDetailsService() {
+        return new UserDetailsServiceImp();
+    }
+
+    @Bean
+    public BCryptPasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+    @Override
+    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
+        auth.userDetailsService(userDetailsService()).passwordEncoder(passwordEncoder());
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        http.authorizeRequests()
+                .antMatchers("/", "/login").permitAll()
+                .antMatchers("/product/admin/*", "/user/admin/*").hasRole("ADMIN")
+                .anyRequest().authenticated()
+                .and()
+                .formLogin().loginPage("/login")
+                .loginProcessingUrl("/signin")
+                .usernameParameter("username")
+                .passwordParameter("password")
+                .successHandler((req, res, auth) -> {
+                    res.sendRedirect("/user/userProfile");
+                })
+                .failureHandler((req, res, exp) -> {
+                    String error = "";
+                    if (exp.getClass().isAssignableFrom(BadCredentialsException.class)) {
+                        error = "Username or Password is incorrect !!";
+                    } else {
+                        error = "Unknown error - " + exp.getMessage();
+                    }
+                    req.getSession().setAttribute("info", error);
+                    res.sendRedirect("/");
+                })
+                .and()
+                .logout()
+                .logoutUrl("/signout")
+                .permitAll()
+                .logoutSuccessUrl("/login")
+                .and()
+                .csrf().disable();
+    }
+}
Index: src/main/java/com/boraji/tutorial/springboot/controller/IndexController.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/controller/IndexController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/controller/IndexController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,31 @@
+package com.boraji.tutorial.springboot.controller;
+
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.service.UserOrderService;
+
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+
+@Controller
+public class IndexController {
+
+  private final UserOrderService userOrderService;
+
+  public IndexController(UserOrderService userOrderService) {
+    this.userOrderService = userOrderService;
+  }
+
+  @GetMapping({ "/" })
+  public String index(@AuthenticationPrincipal User user, Model model) {
+    if (user == null) {
+      return "redirect:/index";
+    } else {
+      if (userOrderService.getBasket(user).isPresent()) {
+        user.setBasket(userOrderService.getBasket(user).get());
+      }
+      return "redirect:/user/userProfile";
+    }
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/controller/OrderConfirmationController.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/controller/OrderConfirmationController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/controller/OrderConfirmationController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,93 @@
+package com.boraji.tutorial.springboot.controller;
+
+
+import com.boraji.tutorial.springboot.model.Order;
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.service.ProductService;
+import com.boraji.tutorial.springboot.service.UserOrderService;
+import com.boraji.tutorial.springboot.utils.ConfirmCode;
+import com.boraji.tutorial.springboot.utils.SendEmail;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.ModelAttribute;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.SessionAttribute;
+import org.springframework.web.bind.annotation.SessionAttributes;
+
+
+import java.util.List;
+
+@Controller
+@SessionAttributes("code")
+@RequestMapping("/confirmation")
+public class OrderConfirmationController {
+
+  private ProductService productService;
+  private UserOrderService userOrderService;
+
+  public OrderConfirmationController(ProductService productService,
+                                     UserOrderService userOrderService) {
+    this.productService = productService;
+    this.userOrderService = userOrderService;
+  }
+
+  @ModelAttribute("code")
+  public String setUpUserConfirmCode() {
+    return ConfirmCode.code();
+  }
+
+  private void filter(Model model, User user) {
+    List<Product> productList = userOrderService.getProductsFromUserBasket(user);
+    Double totalPrice = productService.orderTotalPrice(productList);
+    model.addAttribute("productList", productList);
+    model.addAttribute("totalPrice", totalPrice);
+  }
+
+  @GetMapping("/userOrder")
+  private String prepareUserOrder(@AuthenticationPrincipal User user, Model model) {
+    filter(model, user);
+    return "confirmOrder";
+  }
+
+  @GetMapping("/getConfirmCode")
+  private String getConfirmOrder(@AuthenticationPrincipal User user,
+                                 @RequestParam("email") String email,
+                                 @RequestParam("address") String address,
+                                 @RequestParam("totalPrice") Double totalPrice,
+                                 Model model) {
+    filter(model, user);
+    String confirmCode = ConfirmCode.code();
+    new Thread(() -> SendEmail.sendCode(email, confirmCode, totalPrice)).start();
+    model.addAttribute("email", email);
+    model.addAttribute("address", address);
+    model.addAttribute("code", confirmCode);
+    return "confirmOrder";
+  }
+
+  @PostMapping("/confirmOrder")
+  private String confirmOrder(@AuthenticationPrincipal User user,
+                              @SessionAttribute("code") String code,
+                              @RequestParam("email") String email,
+                              @RequestParam("address") String address,
+                              @RequestParam("code") String confirmCodeFromUser,
+                              Model model) {
+    if (confirmCodeFromUser.equals(code)) {
+      Order order = new Order(user, user.getBasket(), address);
+      userOrderService.addOrderToDb(order);
+      user.dropBasket();
+      model.addAttribute("user", user);
+      model.addAttribute("inform", "request has been sent! TY!");
+      return "UserProfile";
+    }
+    filter(model, user);
+    model.addAttribute("email", email);
+    model.addAttribute("address", address);
+    model.addAttribute("info", "code is not correct!");
+    return "confirmOrder";
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/controller/ProductController.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/controller/ProductController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/controller/ProductController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,99 @@
+package com.boraji.tutorial.springboot.controller;
+
+
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.service.ProductService;
+import com.boraji.tutorial.springboot.service.UserOrderService;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import java.util.List;
+import java.util.Optional;
+
+@Controller
+@RequestMapping("/product")
+public class ProductController {
+
+  private ProductService productService;
+  private UserOrderService userOrderService;
+
+  public ProductController(ProductService productService, UserOrderService userOrderService) {
+    this.productService = productService;
+    this.userOrderService = userOrderService;
+  }
+
+  @GetMapping("/admin/create")
+  private String productForm() {
+    return "newProduct";
+  }
+
+  @PostMapping("/admin/create")
+  private String create(@RequestParam("product") String product,
+                            @RequestParam("description") String description,
+                            @RequestParam("price") Double price,
+                            Model model) {
+    Product newProduct = new Product(product, description, price);
+    productService.saveOrUpdateProduct(newProduct);
+    model.addAttribute("info", "Product add!");
+    return "UserProfile";
+  }
+
+  @GetMapping("/all")
+  private String allProduct(Model model) {
+    if (!productService.getAllProducts().isEmpty()) {
+      List<Product> allProductList = productService.getAllProducts();
+      model.addAttribute("allProductList", allProductList);
+      return "allProducts";
+    }
+    model.addAttribute("info", "Empty products!");
+    return "index";
+  }
+
+  @GetMapping("/basket/add")
+  private String addProductInBasket(@AuthenticationPrincipal User user,
+                                    @RequestParam("addInBox") Long productId,
+                                    Model model) {
+    if (user.getBasket() == null) {
+      userOrderService.addUserBasket(user);
+      model.addAttribute("user", user);
+    }
+    userOrderService.addProductToBasket(user, productId);
+    return "redirect:/product/all";
+  }
+
+  @PostMapping("/admin/delete")
+  private String deleteUser(@RequestParam("delete") Long productId) {
+    productService.deleteProduct(productId);
+    return "redirect:/product/all";
+  }
+
+  @GetMapping("/admin/edit")
+  private String deleteProductForm(@RequestParam("edit") Long productId, Model model) {
+    Optional<Product> currentProduct = productService.getProductById(productId);
+    if (currentProduct.isPresent()) {
+      Product product = currentProduct.get();
+      model.addAttribute("product", product);
+      return "editProduct";
+    }
+    return "redirect:/product/all";
+  }
+
+  @PostMapping("/admin/edit")
+  private String editProduct(@RequestParam("edit") Long productId,
+                             @RequestParam("product") String productName,
+                             @RequestParam("description") String description,
+                             @RequestParam("price") Double price) {
+    Product product = productService.getProductById(productId).get();
+    product.setName(productName);
+    product.setDescription(description);
+    product.setPrice(price);
+    productService.saveOrUpdateProduct(product);
+    return "redirect:/product/all";
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/controller/RegistrationController.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/controller/RegistrationController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/controller/RegistrationController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,60 @@
+package com.boraji.tutorial.springboot.controller;
+
+
+
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.service.AccountService;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import java.util.Optional;
+
+@Controller
+@RequestMapping("/register")
+public class RegistrationController {
+
+  private final AccountService accountService;
+  private BCryptPasswordEncoder bCryptPasswordEncoder;
+
+  public RegistrationController(AccountService accountService,
+                                BCryptPasswordEncoder bCryptPasswordEncoder) {
+    this.accountService = accountService;
+    this.bCryptPasswordEncoder = bCryptPasswordEncoder;
+  }
+  @GetMapping
+  private String getregistrationForm() {
+    return "register";
+  }
+
+  @PostMapping()
+  private String registation(@RequestParam("email") String email,
+                             @RequestParam("pass") String pass,
+                             @RequestParam(value = "role", required = false, defaultValue = "") String role,
+                             @RequestParam("repeatPassword") String repeatPassword,
+                             Model model) {
+    Optional<User> currentUser = accountService.getUserByLogin(email);
+    if (email.isEmpty() | pass.isEmpty() | repeatPassword.isEmpty()) {
+      model.addAttribute("info", "empty fields!!!");
+      return "index";
+    }
+    if (currentUser.isPresent()) {
+      model.addAttribute("info", "such user already exists!");
+      return "index";
+    }
+    if (pass.equals(repeatPassword)) {
+      pass = bCryptPasswordEncoder.encode(pass);
+      User userProfile = new User(email, pass, role);
+      accountService.addUser(userProfile);
+      return "redirect:/user/userProfile";
+    } else {
+      model.addAttribute("info", "Your password not equals!");
+      model.addAttribute("email", email);
+      return "register.jsp";
+    }
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/controller/UserController.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/controller/UserController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/controller/UserController.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,84 @@
+package com.boraji.tutorial.springboot.controller;
+
+
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.service.AccountService;
+import org.springframework.security.core.annotation.AuthenticationPrincipal;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import java.util.List;
+import java.util.Optional;
+
+@Controller
+@RequestMapping("/user")
+public class UserController {
+
+  private final AccountService accountService;
+  private BCryptPasswordEncoder bCryptPasswordEncoder;
+
+  public UserController(AccountService accountService,
+                        BCryptPasswordEncoder bCryptPasswordEncoder) {
+    this.accountService = accountService;
+    this.bCryptPasswordEncoder = bCryptPasswordEncoder;
+  }
+
+  @GetMapping("/userProfile")
+  private String registation(@AuthenticationPrincipal User user, Model model) {
+    model.addAttribute("user", user);
+    return "UserProfile";
+  }
+
+  @GetMapping("/admin/all")
+  private String allUsers(Model model) {
+    if (!accountService.getAllUsers().isEmpty()) {
+      List<User> allUserList = accountService.getAllUsers();
+      model.addAttribute("allUserList", allUserList);
+      return "allUsers";
+    }
+    model.addAttribute("inform", "Empty user list!");
+    return "index";
+  }
+
+  @PostMapping("/admin/delete")
+  private String deleteUser(@RequestParam("delete") Long userId) {
+    accountService.deleteUser(userId);
+    return "redirect:/user/all";
+  }
+
+  @GetMapping("/admin/update")
+  private String getUpdateForm(@RequestParam("edit") Long userId, Model model) {
+    Optional<User> currentUser = accountService.getUserById(userId);
+    if (currentUser.isPresent()) {
+      User user = currentUser.get();
+      model.addAttribute("user", user);
+      return "editUser";
+    }
+    return "redirect:/User/AllUsers";
+  }
+
+  @PostMapping("/update")
+  private String updateUser(@RequestParam("edit") Long userId,
+                            @RequestParam("email") String login,
+                            @RequestParam("pass") String pass,
+                            @RequestParam("repeatPassword") String repeatPassword,
+                            @RequestParam("role") String role) {
+    User user = accountService.getUserById(userId).get();
+    if (!login.isEmpty()) {
+      user.setEmail(login);
+    }
+    if (pass.equals(repeatPassword) & !pass.isEmpty()) {
+      user.setPassword(bCryptPasswordEncoder.encode(pass));
+    }
+    if (role != null && !role.equals(user.getRole())) {
+      user.setRole(role);
+    }
+    accountService.saveOrUpdateUser(user);
+    return "redirect:/user/all";
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/model/Basket.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/model/Basket.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/model/Basket.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,92 @@
+package com.boraji.tutorial.springboot.model;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import java.util.List;
+
+@Entity
+@Table(name = "basket")
+public class Basket {
+
+  @Id
+  @GeneratedValue(strategy = GenerationType.IDENTITY)
+  @Column(name = "basket_id")
+  private Long basket_id;
+
+
+  @OneToOne(cascade = CascadeType.MERGE)
+  private User user;
+
+  @Column(name = "available")
+  private String available;
+
+  @ManyToMany(fetch = FetchType.EAGER ,cascade = { CascadeType.MERGE })
+  @JoinTable(
+          name = "product_basket_hib",
+          joinColumns = { @JoinColumn(name = "basket_id") },
+          inverseJoinColumns = { @JoinColumn(name = "product_id") }
+  )
+  private List<Product> products;
+
+  public Basket() {
+  }
+
+  public Basket(List<Product> products , User user, String available) {
+    this.products = products;
+    this.user = user;
+    this.available = available;
+  }
+
+  public String getAvailable() {
+    return available;
+  }
+
+  public void setAvailable(String available) {
+    this.available = available;
+  }
+
+  public List<Product> getProducts() {
+    return products;
+  }
+
+  public void setProducts(List<Product> products) {
+    this.products = products;
+  }
+
+  public void addProducts(Product products) {
+    this.products.add(products);
+  }
+  public User getUser() {
+    return user;
+  }
+
+  public void setUser(User user) {
+    this.user = user;
+  }
+
+  public Long getBasket_id() {
+    return basket_id;
+  }
+
+  public void setBasket_id(Long basket_id) {
+    this.basket_id = basket_id;
+  }
+
+  public String getAvailble() {
+    return available;
+  }
+
+  public void setAvailble(String available) {
+    this.available = available;
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/model/Order.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/model/Order.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/model/Order.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,74 @@
+package com.boraji.tutorial.springboot.model;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "user_order")
+public class Order {
+
+  @Id
+  @GeneratedValue(strategy = GenerationType.IDENTITY)
+  @Column(name = "order_id")
+  private Long id;
+
+  @ManyToOne(fetch = FetchType.EAGER)
+  @JoinColumn(name = "id")
+  private User userId;
+
+  @OneToOne(fetch = FetchType.EAGER)
+  @JoinColumn(name = "basket_id")
+  private Basket boxId;
+
+  @Column(name = "address")
+  private String address;
+
+  public Order() {
+  }
+
+  public Order(User userId, Basket boxId, String address) {
+    this.userId = userId;
+    this.boxId = boxId;
+    this.address = address;
+  }
+
+  public Long getId() {
+    return id;
+  }
+
+  public void setId(Long id) {
+    this.id = id;
+  }
+
+  public User getUserId() {
+    return userId;
+  }
+
+  public void setUserId(User userId) {
+    this.userId = userId;
+  }
+
+  public Basket getBoxId() {
+    return boxId;
+  }
+
+  public void setBoxId(Basket boxId) {
+    this.boxId = boxId;
+  }
+
+  public String getAddress() {
+    return address;
+  }
+
+  public void setAddress(String address) {
+    this.address = address;
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/model/Product.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/model/Product.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/model/Product.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,86 @@
+package com.boraji.tutorial.springboot.model;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.ManyToMany;
+import javax.persistence.Table;
+import java.util.List;
+
+@Entity
+@Table(name = "product")
+public class Product {
+
+  @Id
+  @GeneratedValue(strategy = GenerationType.IDENTITY)
+  @Column(name = "id")
+  private Long id;
+
+  @Column(name = "name")
+  private String name;
+
+  @Column(name = "description")
+  private String description;
+
+  @Column(name = "price")
+  private Double price;
+
+  @ManyToMany(mappedBy = "products", fetch = FetchType.EAGER)
+  private List<Basket> baskets;
+
+  public Product(Long id, String name, String description, Double price) {
+    this.id = id;
+    this.name = name;
+    this.description = description;
+    this.price = price;
+  }
+
+  public Product(String name, String description, Double price) {
+    this.name = name;
+    this.description = description;
+    this.price = price;
+  }
+
+  public Product() {
+  }
+
+  public Product(String string) {
+    this.name = string;
+  }
+
+
+  public Long getId() {
+    return id;
+  }
+
+  public void setId(Long id) {
+    this.id = id;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public void setName(String name) {
+    this.name = name;
+  }
+
+  public String getDescription() {
+    return description;
+  }
+
+  public void setDescription(String description) {
+    this.description = description;
+  }
+
+  public Double getPrice() {
+    return price;
+  }
+
+  public void setPrice(Double price) {
+    this.price = price;
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/model/User.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/model/User.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/model/User.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,139 @@
+package com.boraji.tutorial.springboot.model;
+
+
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import java.util.Arrays;
+import java.util.Collection;
+
+@Entity
+@Table(name = "user")
+public class User implements UserDetails {
+
+  @Id
+  @GeneratedValue(strategy = GenerationType.IDENTITY)
+  @Column(name = "id")
+  private Long id;
+
+  @Column(name = "email")
+  private String email;
+
+  @Column(name = "password")
+  private String password;
+
+  @Column(name = "role")
+  private String role;
+
+  @Column(name = "salt", updatable=true, insertable=true)
+  private byte[] salt;
+
+  @Transient
+  private Basket basket = null;
+
+  public User(Long id, String email, String password, String role) {
+    this.id = id;
+    this.email = email;
+    this.password = password;
+    this.role = role;
+}
+
+  public User(String email, String password, String role) {
+    this.email = email;
+    this.password = password;
+    this.role = role;
+  }
+
+  public User() {
+  }
+
+  public Long getId() {
+    return id;
+  }
+
+  public Basket getBasket() {
+    return basket;
+  }
+
+  public void setBasket(Basket basket) {
+    this.basket = basket;
+  }
+
+  public void dropBasket() {
+    basket = null;
+  }
+
+  public void setId(Long id) {
+    this.id = id;
+  }
+
+  public String getEmail() {
+    return email;
+  }
+
+  public void setEmail(String email) {
+    this.email = email;
+  }
+
+  @Override
+  public Collection<? extends GrantedAuthority> getAuthorities() {
+    return Arrays.asList(new SimpleGrantedAuthority(getRole()));
+  }
+
+  public String getPassword() {
+    return password;
+  }
+
+  @Override
+  public String getUsername() {
+    return email;
+  }
+
+  @Override
+  public boolean isAccountNonExpired() {
+    return true;
+  }
+
+  @Override
+  public boolean isAccountNonLocked() {
+    return true;
+  }
+
+  @Override
+  public boolean isCredentialsNonExpired() {
+    return true;
+  }
+
+  @Override
+  public boolean isEnabled() {
+    return true;
+  }
+
+  public void setPassword(String password) {
+    this.password = password;
+  }
+
+  public String getRole() {
+    return role;
+  }
+
+  public void setRole(String role) {
+    this.role = role;
+  }
+
+  public byte[] getSalt() {
+    return salt;
+  }
+
+  public void setSalt(byte[] salt) {
+    this.salt = salt;
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/repository/OrderJpaRepository.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/repository/OrderJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/repository/OrderJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,17 @@
+package com.boraji.tutorial.springboot.repository;
+
+
+import com.boraji.tutorial.springboot.model.Order;
+import com.boraji.tutorial.springboot.model.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface OrderJpaRepository extends CrudRepository<Order, Long>, JpaRepository<Order, Long> {
+
+
+
+}
\ No newline at end of file
Index: src/main/java/com/boraji/tutorial/springboot/repository/ProductJpaRepository.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/repository/ProductJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/repository/ProductJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,17 @@
+package com.boraji.tutorial.springboot.repository;
+
+
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface ProductJpaRepository extends CrudRepository<Product, Long>, JpaRepository<Product, Long> {
+
+  Optional<User> findByName(String name);
+
+}
\ No newline at end of file
Index: src/main/java/com/boraji/tutorial/springboot/repository/UserBasketJpaRepository.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/repository/UserBasketJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/repository/UserBasketJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,23 @@
+package com.boraji.tutorial.springboot.repository;
+
+
+import com.boraji.tutorial.springboot.model.Basket;
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+import java.util.Optional;
+
+@Repository
+public interface UserBasketJpaRepository extends CrudRepository<Basket, Long>, JpaRepository<Basket, Long> {
+
+  @Query("SELECT b FROM Basket b WHERE b.user = :id AND b.available= 'true'")
+  public Optional<Basket> getBasket(@Param("id") User id);
+ // Optional<Basket> findBasketWhereUser
+
+}
\ No newline at end of file
Index: src/main/java/com/boraji/tutorial/springboot/repository/UserJpaRepository.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/repository/UserJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/repository/UserJpaRepository.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,17 @@
+package com.boraji.tutorial.springboot.repository;
+
+
+import com.boraji.tutorial.springboot.model.User;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.repository.CrudRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.Optional;
+
+@Repository
+public interface UserJpaRepository extends CrudRepository<User, Long>, JpaRepository<User, Long> {
+
+  Optional<User> findByEmail(String email);
+
+}
\ No newline at end of file
Index: src/main/java/com/boraji/tutorial/springboot/service/AccountService.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/AccountService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/AccountService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,23 @@
+package com.boraji.tutorial.springboot.service;
+
+
+
+import com.boraji.tutorial.springboot.model.User;
+
+import java.util.List;
+import java.util.Optional;
+
+public interface AccountService {
+
+  Optional<User> getUserByLogin(String login);
+
+  List<User> getAllUsers();
+
+  void saveOrUpdateUser(User user);
+
+  void addUser(User name);
+
+  void deleteUser(Long id);
+
+  Optional<User> getUserById(long id);
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/AccountServiceImpl.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/AccountServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/AccountServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,59 @@
+package com.boraji.tutorial.springboot.service;
+
+
+
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.repository.UserJpaRepository;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.jws.soap.SOAPBinding;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class AccountServiceImpl implements AccountService {
+
+  private final UserJpaRepository userJpaRepository;
+
+  public AccountServiceImpl(UserJpaRepository userJpaRepository) {
+    this.userJpaRepository = userJpaRepository;
+  }
+
+  @Transactional
+  @Override
+  public Optional<User> getUserByLogin(String login) {
+    return userJpaRepository.findByEmail(login);
+  }
+
+  @Transactional
+  @Override
+  public Optional<User> getUserById(long id) {
+    return Optional.ofNullable(userJpaRepository.getOne(id));
+  }
+
+  @Transactional
+  @Override
+  public List<User> getAllUsers() {
+    return userJpaRepository.findAll();
+  }
+
+  @Transactional
+  @Override
+  public void saveOrUpdateUser(User user) {
+    userJpaRepository.save(user);
+  }
+
+  @Transactional
+  @Override
+  public void addUser(User name) {
+    userJpaRepository.save(name);
+  }
+
+  @Transactional
+  @Override
+  public void deleteUser(Long id) {
+    userJpaRepository.delete(id);
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/ProductService.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/ProductService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/ProductService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,19 @@
+package com.boraji.tutorial.springboot.service;
+
+import com.boraji.tutorial.springboot.model.Product;
+
+import java.util.List;
+import java.util.Optional;
+
+public interface ProductService {
+
+  Optional<Product> getProductById(long id);
+
+  List<Product> getAllProducts();
+
+  double orderTotalPrice(List<Product> productList);
+
+  void deleteProduct(long id);
+
+  void saveOrUpdateProduct(Product name);
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/ProductServiceImpl.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/ProductServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/ProductServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,51 @@
+package com.boraji.tutorial.springboot.service;
+
+
+
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.repository.ProductJpaRepository;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.DoubleStream;
+
+@Service
+public class ProductServiceImpl implements ProductService {
+
+  private final ProductJpaRepository productJpaRepository;
+
+  public ProductServiceImpl(ProductJpaRepository productJpaRepository) {
+    this.productJpaRepository = productJpaRepository;
+  }
+
+  @Transactional
+  @Override
+  public Optional<Product> getProductById(long id) {
+    return Optional.ofNullable(productJpaRepository.findOne(id));
+  }
+
+  @Transactional(readOnly = true)
+  @Override
+  public List<Product> getAllProducts() {
+    return productJpaRepository.findAll();
+  }
+
+  @Transactional
+  @Override
+  public void saveOrUpdateProduct(Product name) {
+    productJpaRepository.save(name);
+  }
+
+  @Override
+  public double orderTotalPrice(List<Product> productList) {
+    return productList.stream().flatMapToDouble(x -> DoubleStream.of(x.getPrice())).sum();
+  }
+
+  @Transactional
+  @Override
+  public void deleteProduct(long id) {
+    productJpaRepository.delete(id);
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/UserDetailsServiceImp.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/UserDetailsServiceImp.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/UserDetailsServiceImp.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,30 @@
+package com.boraji.tutorial.springboot.service;
+
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.repository.UserJpaRepository;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class UserDetailsServiceImp implements UserDetailsService {
+
+  @Autowired
+  private UserJpaRepository userJpaRepository;
+
+  @Transactional
+  @Override
+  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
+    User user = userJpaRepository.findByEmail(username).get();
+    if (user != null) {
+     return user;
+    } else {
+      throw new UsernameNotFoundException("User not found.");
+    }
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/UserOrderService.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/UserOrderService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/UserOrderService.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,22 @@
+package com.boraji.tutorial.springboot.service;
+
+import com.boraji.tutorial.springboot.model.Basket;
+import com.boraji.tutorial.springboot.model.Order;
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+
+import java.util.List;
+import java.util.Optional;
+
+public interface UserOrderService {
+
+  void addOrderToDb(Order order);
+
+  void addProductToBasket(User user, Long id);
+
+  void addUserBasket(User user);
+
+  Optional<Basket> getBasket(User user);
+
+  List<Product> getProductsFromUserBasket(User user);
+}
Index: src/main/java/com/boraji/tutorial/springboot/service/UserOrderServiceImpl.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/service/UserOrderServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/service/UserOrderServiceImpl.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,70 @@
+package com.boraji.tutorial.springboot.service;
+
+
+
+import com.boraji.tutorial.springboot.model.Basket;
+import com.boraji.tutorial.springboot.model.Order;
+import com.boraji.tutorial.springboot.model.Product;
+import com.boraji.tutorial.springboot.model.User;
+import com.boraji.tutorial.springboot.repository.OrderJpaRepository;
+import com.boraji.tutorial.springboot.repository.ProductJpaRepository;
+import com.boraji.tutorial.springboot.repository.UserBasketJpaRepository;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class UserOrderServiceImpl implements UserOrderService {
+
+  private final UserBasketJpaRepository userBasketJpaRepository;
+  private final OrderJpaRepository orderJpaRepository;
+  private final ProductJpaRepository productJpaRepository;
+
+  public UserOrderServiceImpl(UserBasketJpaRepository userBasketJpaRepository,
+                              OrderJpaRepository orderJpaRepository,
+                              ProductJpaRepository productJpaRepository) {
+    this.userBasketJpaRepository = userBasketJpaRepository;
+    this.orderJpaRepository = orderJpaRepository;
+    this.productJpaRepository = productJpaRepository;
+  }
+
+  @Transactional
+  public void addOrderToDb(Order order) {
+    orderJpaRepository.save(order);
+    order.getBoxId().setAvailable("false");
+    userBasketJpaRepository.save(order.getBoxId());
+  }
+
+  @Transactional
+  @Override
+  public void addProductToBasket(User user, Long id) {
+    Product product = productJpaRepository.getOne(id);
+    Basket userBasket = userBasketJpaRepository.getBasket(user).get();
+    userBasket.addProducts(product);
+    userBasketJpaRepository.save(userBasket);
+  }
+
+  @Transactional
+  @Override
+  public void addUserBasket(User user) {
+    Basket newBasket = new Basket(new ArrayList<>(), user, "true");
+    userBasketJpaRepository.save(newBasket);
+    user.setBasket(newBasket);
+  }
+
+  @Transactional
+  @Override
+  public List<Product> getProductsFromUserBasket(User user) {
+    Basket basket = userBasketJpaRepository.getBasket(user).get();
+    return basket.getProducts();
+  }
+
+  @Transactional
+  @Override
+  public Optional<Basket> getBasket(User user) {
+    return userBasketJpaRepository.getBasket(user);
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/utils/ConfirmCode.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/utils/ConfirmCode.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/utils/ConfirmCode.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,19 @@
+package com.boraji.tutorial.springboot.utils;
+
+import java.util.Random;
+
+public class ConfirmCode {
+
+  private static final int CHAR_START = 65;
+  private static final int CHAR_END = 90;
+
+  public static String code() {
+    StringBuilder stringBuilder = new StringBuilder();
+    Random random = new Random();
+    for (int i = 0; i < 4; i++) {
+      int randomChar = random.ints(CHAR_START,(CHAR_END + 1)).findFirst().getAsInt();
+      stringBuilder.append((char) randomChar);
+    }
+    return stringBuilder.toString();
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/utils/EncryptPassword.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/utils/EncryptPassword.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/utils/EncryptPassword.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,42 @@
+package com.boraji.tutorial.springboot.utils;
+
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+
+public class EncryptPassword {
+
+  private static final Logger LOGGER = Logger.getLogger(EncryptPassword.class);
+
+  public static String encryptPassword(String passwordToHash, byte[] salt) {
+    String generatedPassword = null;
+    try {
+      MessageDigest messageDigest = MessageDigest.getInstance("SHA-512");
+      messageDigest.update(salt);
+      byte[] bytes = messageDigest.digest(passwordToHash.getBytes());
+      StringBuilder stringBuilder = new StringBuilder();
+      for(int i=0; i< bytes.length ;i++) {
+        stringBuilder.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
+      }
+      generatedPassword = stringBuilder.toString();
+    } catch (NoSuchAlgorithmException e) {
+      LOGGER.log(Level.ERROR, "Failed to  encrypt password: ", e);
+    }
+    return generatedPassword;
+  }
+
+  public static byte[] getSalt() {
+    SecureRandom secureRandom = null;
+    try {
+      secureRandom = SecureRandom.getInstance("SHA1PRNG");
+    } catch (NoSuchAlgorithmException e) {
+      LOGGER.log(Level.ERROR, "Failed to  get random salt: ", e);
+    }
+    byte[] salt = new byte[16];
+    secureRandom.nextBytes(salt);
+    return salt;
+  }
+}
Index: src/main/java/com/boraji/tutorial/springboot/utils/SendEmail.java
===================================================================
--- src/main/java/com/boraji/tutorial/springboot/utils/SendEmail.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/java/com/boraji/tutorial/springboot/utils/SendEmail.java	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,46 @@
+package com.boraji.tutorial.springboot.utils;
+
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+
+import javax.mail.Message;
+import javax.mail.MessagingException;
+import javax.mail.PasswordAuthentication;
+import javax.mail.Session;
+import javax.mail.Transport;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeMessage;
+import java.util.Properties;
+
+public class SendEmail {
+
+  private static final Logger LOGGER = Logger.getLogger(SendEmail.class);
+
+  public static void sendCode(String email, String code, Double totalPrice) {
+
+    final String username = "testuserma1488@gmail.com";
+    final String password = "TestUser1488";
+
+    Properties properties = new Properties();
+    properties.put("mail.smtp.host", "smtp.gmail.com");
+    properties.put("mail.smtp.port", "587");
+    properties.put("mail.smtp.auth", "true");
+    properties.put("mail.smtp.starttls.enable", "true"); //TLS
+
+    Session session = Session.getInstance(properties, new javax.mail.Authenticator() {
+      protected PasswordAuthentication getPasswordAuthentication() {
+        return new PasswordAuthentication(username, password);
+      }
+    });
+    try {
+      Message message = new MimeMessage(session);
+      message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email));
+      message.setSubject("Confirm CODE");
+      message.setText("Your order for: " + totalPrice + "UAH\n"
+              + "Your Confirm CODE: " + code );
+      Transport.send(message);
+    } catch (MessagingException e) {
+       LOGGER.log(Level.ERROR, "Failed to send email: ", e);
+    }
+  }
+}
Index: src/main/resources/application.properties
===================================================================
--- src/main/resources/application.properties	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/resources/application.properties	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,8 @@
+spring.mvc.view.prefix=/WEB-INF/views/
+spring.mvc.view.suffix=.jsp
+spring.jpa.hibernate.ddl-auto=update
+spring.datasource.url=jdbc:mysql://localhost:3306/Spring
+spring.datasource.username=user
+spring.datasource.password=user
+spring.jpa.database-platform=org.hibernate.dialect.MySQL5Dialect
+spring.jpa.show-sql=true
\ No newline at end of file
Index: src/main/webapp/WEB-INF/views/UserProfile.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/UserProfile.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/UserProfile.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,37 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 11.07.2019
+  Time: 21:47
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<center> <h2> <c:out value="${inform}"/> </h2> </center>
+<center>
+    <h2> Your Profile:</h2>
+    <a href="/product/admin/create"> New Product </a><br>
+    <a href="/product/all"> All Products </a> <br>
+    <a href="myOrders"> My Orders </a> <br>
+        <c:if  test="${user.getRole() eq 'ROLE_ADMIN'}" >
+    <h3> Add NEW USER:</h3>
+    <form action="/register" method="post">
+        Email <input name="email" type="email"/><br>
+        Password <input name="pass" type="password"><br>
+        Repeat password <input name="repeatPassword" type="password"><br>
+        <input type="radio" name="role" value="ROLE_USER">Role: user<Br>
+        <input type="radio" name="role" value="ROLE_ADMIN"> Role: admin<Br>
+        <button type="submit"> Submit </button><br>
+        <button type="submit" formaction="/user/admin/all" formmethod="get">All Users</button><br>
+    </form>
+        </c:if>
+
+    <a href='<spring:url value="/signout"/>'>Logout</a>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/allProducts.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/allProducts.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/allProducts.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,60 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 05.07.2019
+  Time: 16:28
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<center>
+    <h2> My Products:</h2>
+    <c:out value="${info}"/>
+    <c:out value="${sessionScope.Box}"/>
+    <table border="1" align="center">
+        <tr>
+            <th> Name</th>
+            <th> description</th>
+            <th> Price</th>
+            <th> Actions</th>
+            <c:forEach var="currentProduct" items="${allProductList}">
+        <tr>
+            <td> ${currentProduct.getName()}</td>
+            <td> ${currentProduct.getDescription()}</td>
+            <td> ${currentProduct.getPrice()}</td>
+            <td>
+                <form action="/product/basket/add" method="get">
+                    <button name="addInBox" type="submit" value="${currentProduct.getId()}">Add in Box</button>
+                </form>
+                <c:if test="${user.getRole() eq 'admin'}">
+                <form action="/product/admin/delete" method="post">
+                    <button name="delete" type="submit" value="${currentProduct.getId()}">Delete</button>
+                </form>
+                <form action="/product/admin/edit" method="get">
+                    <button name="edit" type="submit" value="${currentProduct.getId()}">Edit</button>
+                </form>
+            </td>
+            </c:if>
+
+        </tr>
+        </c:forEach>
+    </table>
+    <form action="/confirmation/userOrder">
+        <button type="submit"> Confirm order</button>
+    </form>
+    <c:if test="${user.getRole() eq 'ROLE_ADMIN'}">
+    <center>
+        <form action="/product/admin/create" method="get">
+            <a href="/product/admin/create"> NewProduct </a><br>
+
+            <form action="/user/admin/all" method="post">
+                <a href="/user/admin/all"> All Users </a><br>
+            </form>
+            </c:if>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/allUsers.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/allUsers.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/allUsers.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,46 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 04.07.2019
+  Time: 21:55
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<form action="register" method="post">
+    <a href="register"> Registration </a> <br>
+    <form action="all" method="post">
+        <a href="all"> All Product </a><br>
+    </form>
+    <center>
+        <h2> Список пользователей:</h2>
+        <table border="1" align="center">
+            <tr>
+                <th> Email</th>
+                <th> Password</th>
+                <th> Actions</th>
+                <c:forEach var="currentUser" items="${allUserList}">
+            <tr>
+                <td> ${currentUser.getEmail()}</td>
+                <td> ${currentUser.getPassword()}</td>
+                <td>
+                    <form action="/user/admin/delete" method="post">
+                        <button name="delete" type="submit"
+                                value="${currentUser.getId()}">Delete
+                        </button>
+                    </form>
+                    <form action="/user/admin/update" method="get">
+                        <button name="edit" type="submit"
+                                value="${currentUser.getId()}">Edit
+                        </button>
+                    </form>
+                </td>
+            </tr>
+            </c:forEach>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/confirmOrder.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/confirmOrder.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/confirmOrder.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,48 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 16.07.2019
+  Time: 0:59
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<center>
+    <h2> <c:out value="${info}"/> </h2>
+<center> <h2>Your Order:</h2></center>
+    <table border="1" align="center">
+        <tr> <th> Name </th>
+            <th> description </th>
+            <th> Price </th>
+            <c:forEach var="currentProduct" items="${productList}">
+        <tr>
+            <td> ${currentProduct.getName()}</td>
+            <td> ${currentProduct.getDescription()}</td>
+            <td> ${currentProduct.getPrice()}</td>
+        </tr>
+        </c:forEach>
+    </table>
+    <center><h2>Total Price: ${totalPrice} </h2></center>
+        <center><h2>Confirm Order:</h2></center>
+    <form action="/confirmation/getConfirmCode" method="get" >
+       Email <input name="email" type="email" value="${email}" ><br>
+        Address <input name="address" type="text" value="${address}"><br>
+        <input name="totalPrice"  type="hidden" value="${totalPrice}" />
+        <input name="productList" type="hidden" value="${productList}"  />
+        <button name="totalPrice" type="submit" > Get Confirm Code </button><br>
+    </form>
+<center><h2>Confirm Code:</h2></center>
+    <form action="/confirmation/confirmOrder" method="post">
+        Code <input name="code" type="text" ><br>
+        <input name="email"  type="hidden" value="${email}" />
+        <input name="address" type="hidden" value="${address}"  />
+        <button type="submit"> Confirm Code </button><br>
+    </form>
+</center>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/editProduct.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/editProduct.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/editProduct.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,23 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 14.07.2019
+  Time: 16:18
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<center>
+<form action="/product/admin/edit" method="post">
+        <input name="product" type="text" value="${product.getName()}"/><br>
+        <input name="description" type="text"  value="${product.getDescription()}"><br>
+        <input name="price" type="text" value="${product.getPrice()}"><br>
+    <button  name="edit" type="submit" value="${product.getId()}"> Change DATA </button><br>
+</form>
+</center>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/editUser.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/editUser.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/editUser.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,23 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 09.07.2019
+  Time: 19:22
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<form action="/user/admin/update" method="post">
+    Email <input name="email" type="email" value="${user.getEmail()}"/><br>
+    Password <input name="pass" id="password" type="password" ><br>
+    Repeat password <input name="repeatPassword" id="repeatPassword" type="password"><br>
+    <input type="radio" name="role" value="user">Role: user<Br>
+    <input type="radio" name="role" value="admin"> Role: admin<Br>
+    <button  name="edit" type="submit" value="${user.getId()}"> Change DATA </button><br>
+</form>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/index.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/index.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/index.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,34 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 03.07.2019
+  Time: 16:19
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>$Title$</title>
+</head>
+<body>
+<center>
+    <h2> PLS SIGN IN!</h2>
+    <c:out value="${info}"/>
+    <form action='<spring:url value="/signin"/>' method="post">
+        Email <input name="username" type="email" value="${email}"/><br>
+        Password <input name="password" id="password" type="password"><br>
+        Repeat password <input name="repeatPassword" id="repeatPassword" type="password"><br>
+        <button type="submit"> Sing in</button><br>
+        <button type="submit" formaction="/register" formmethod="post">Sing up</button><br>
+    </form>
+
+    <button type="submit" formaction="/user/all" formmethod="post"> All Users</button><br>
+    <a href="register"> Registration </a><br>
+    <a href="/product"> New Product </a><br>
+    <a href="/user/admin/all"> All Users </a><br>
+    <a href="/product/all"> All Products </a> <br>
+</center>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/myOrders.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/myOrders.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/myOrders.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,36 @@
+<%@ page import="factory.ProductServiceFactory" %>
+<%@ page import="service.impl.ProductServiceImpl" %>
+<%@ page import="java.io.PrintWriter" %>
+<%@ page import="java.util.List" %>
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 05.07.2019
+  Time: 16:28
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+        <center>
+            <h2> My Orders:</h2>
+            <c:out value="${info}"/>
+          <c:out value="${sessionScope.Box}"/>
+            <table border="1" align="center">
+                <tr> <th> OrderID </th>
+                    <th> Actions </th>
+                    <c:forEach var="currentProduct" items="${allProductList}">
+                <tr>
+                    <td> ${currentProduct}</td>
+                    <td>
+                        <form  action="myOrders" method="post" >
+                            <button name="view" type="submit" value="${currentProduct}" >View Order info</button> </form>
+                </tr>
+                </c:forEach>
+            </table>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/newProduct.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/newProduct.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/newProduct.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,22 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 04.07.2019
+  Time: 1:01
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title> New Product </title>
+</head>
+<body>
+<form  action="/product/admin/create" method="post">
+    <input name="product" type="text"/>
+    <input name="description" type="text">
+    <input name="price" type="text">
+    <input type="submit">
+</form>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/register.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/register.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/register.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,25 @@
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 03.07.2019
+  Time: 16:59
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title> Registration </title>
+</head>
+<body>
+<center>
+    <c:out value="${info}"/>
+    <form action="/register" method="post">
+        Email <input name="email" type="email" value="${pass}"/><br>
+        Password <input name="pass" id="password" type="password"> <br>
+        Repeat password <input name="repeatPassword" id="repeatPassword" type="password"><br>
+        <input type="submit"><br>
+    </form>
+</center>
+</body>
+</html>
Index: src/main/webapp/WEB-INF/views/viewOrder.jsp
===================================================================
--- src/main/webapp/WEB-INF/views/viewOrder.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
+++ src/main/webapp/WEB-INF/views/viewOrder.jsp	(revision 67c18f00070bf012adce2110d4c87b17bfe98e6a)
@@ -0,0 +1,38 @@
+<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
+<%--
+  Created by IntelliJ IDEA.
+  User: Vitaliy
+  Date: 23.07.2019
+  Time: 19:59
+  To change this template use File | Settings | File Templates.
+--%>
+<%@ page contentType="text/html;charset=UTF-8" language="java" %>
+<html>
+<head>
+    <title>Title</title>
+</head>
+<body>
+<center>
+    <h2> Order:</h2>
+    <c:out value="${info}"/>
+    <c:out value="${sessionScope.Box}"/>
+    <table border="1" align="center">
+        <tr> <th> Order ID </th>
+            <th> address </th>
+            <th> user Name </th>
+            <th> product </th>
+            <th> description </th>
+            <th> price </th>
+            <c:forEach var="myOrder" items="${myOrder}">
+        <tr>
+            <td> ${myOrder.getOrderId()}</td>
+            <td> ${myOrder.getAddress()}</td>
+            <td> ${myOrder.getUser()}</td>
+            <td> ${myOrder.getProduct()}</td>
+            <td> ${myOrder.getDescription()}</td>
+            <td> ${myOrder.getPrice()}</td>
+        </tr>
+        </c:forEach>
+    </table>
+</body>
+</html>
